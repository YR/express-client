/* generated by Buddy 3.0.0-beta-7 */

'use strict';

/**
 * Browser application
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var assign = require('object-assign'),
    debug = require('debug')('express:application'),
    Emitter = require('eventemitter3'),
    history = require('./history'),
    request = require('./request'),
    response = require('./response'),
    router = require('./router');

module.exports = Application;

var Application = (function (_Emitter) {
	_inherits(Application, _Emitter);

	/**
  * Constructor
  */

	function Application() {
		_classCallCheck(this, Application);

		_Emitter.call(this);

		this.settings = {
			env: undefined || 'development'
		};
		this.cache = {};
		this.locals = {};
		this.mountpath = '/';
		this._router = router({
			caseSensitive: false,
			strict: false,
			mergeParams: true
		});
		this.parent;

		this.handle = this.handle.bind(this);
		this.navigateTo = this.navigateTo.bind(this);
		this.redirectTo = this.redirectTo.bind(this);
		this.getCurrentContext = this.getCurrentContext.bind(this);
		this.refresh = this.refresh.bind(this);

		// Create request/response factories
		var self = this,
		    req = function (url, bootstrap) {
			var req = request(url, bootstrap);
			req.app = app;
			return req;
		},
		    res = function () {
			var res = response();
			res.app = app;
			return res;
		};

		this.history = history(req, res, this.handle);
	}

	/**
  * Store 'value' for 'key'
  * @param {String} key
  * @param {Object} value
  */

	Application.prototype.set = function set(key, value) {
		// get()
		if (arguments.length == 1) return this.settings[key];

		this.settings[key] = value;
	};

	/**
  * Add one or more 'fn' to middleware pipeline at optional 'path'
  * @param {Function} fn(req, res, next)
  */

	Application.prototype.use = function use( /* path, */fn /* ...fn */) {
		var offset = 0,
		    path = '/',
		    fns = undefined;

		if ('string' == typeof fn) {
			offset = 1;
			path = fn;
		}

		fns = Array.prototype.slice.call(arguments, offset);

		fns.forEach(function (fn) {
			var _this = this;

			if (fn instanceof Application) {
				(function () {
					var app = fn,
					    handler = app.handle;

					app.mountpath = path;
					app.parent = _this;
					fn = function mounted_app(req, res, next) {
						// Change app reference to mounted
						var orig = req.app;

						req.app = res.app = app;
						handler(req, res, function (err) {
							// Restore app reference when done
							req.app = res.app = orig;
							next(err);
						});
					};
				})();
			}

			debug('adding application middleware layer with path %s', path);
			this._router.use(path, fn);
		}, this);
	};

	/**
  * Add get at 'path' with strict matching of path
  * @param {String} path
 	 * @returns {Object}
  */

	Application.prototype.get = function get(path) {
		if (arguments.length == 1) return this.set(path);

		this._router.get(Array.prototype.slice.call(arguments));

		return this;
	};

	/**
  * Handle param 'name' with 'fn'
  * @param {String} name
  * @param {Function} fn(req, res, next, value)
  */

	Application.prototype.param = function param(name, fn) {
		this._router.param(name, fn);
	};

	/**
  * Start listening for requests
  */

	Application.prototype.listen = function listen() {
		if (!this.parent) this.history.listen();
	};

	/**
  * Run request/response through router's middleware pipline
  * @param {Request} req
  * @param {Response} res
  * @param {Function} done
  */

	Application.prototype.handle = function handle(req, res, done) {
		// Handle external link
		if ('string' == typeof req) {
			_Emitter.prototype.emit.call(this, 'link:external', req);
		} else {
			this._router.handle(req, res, done || function () {});
		}
	};

	/**
  * Change/update browser history state
  * @param {String} url
  * @param {String} title
  * @param {Boolean} isUpdate
  */

	Application.prototype.navigateTo = function navigateTo(url, title, isUpdate) {
		this[this.parent ? 'parent' : 'history'].navigateTo(url, title, isUpdate);
	};

	/**
  * Force browser location change
  * @param {String} url
  * @param {String} title
  */

	Application.prototype.redirectTo = function redirectTo(url) {
		this[this.parent ? 'parent' : 'history'].redirectTo(url);
	};

	/**
  * Retrieve current context
  * @returns {Object}
  */

	Application.prototype.getCurrentContext = function getCurrentContext() {
		return this[this.parent ? 'parent' : 'history'].getCurrentContext();
	};

	/**
  * Refresh current location
  * @returns {Object}
  */

	Application.prototype.refresh = function refresh() {
		this[this.parent ? 'parent' : 'history'].refresh();
	};

	return Application;
})(Emitter);